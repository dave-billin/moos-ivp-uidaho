//  global variables anyone can use them
//ServerHost = 192.168.2.3
ServerHost = localhost
ServerPort = 9000

// you can name tag processes connected to a particular
// DB under a community name
Community = V1

//some processes look at this flag to see wether things are real
Simulator = false


//---------------------------------------
ProcessConfig = ANTLER
{
    // pAntler launches processes for you
    // you can specify whether or not each process gets a new window or not
    // you can specify the name under which each process registers with MOOSDB
    // Run = PROC_NAME @ [ NewConsole = [TRUE/FALSE] [~ MOOSNAME]]


    //crucial processes
    Run = MOOSDB        @   NewConsole = true
     //Run = iSpock      @   NewConsole = true
     Run = uMS
     
   //this next line sets the executable paths explicitly
   //ExecutablePath = /media/RINGO/moos-ivp/MOOS/YellowSub/iSpock/src

   //this tells pAntler to use the system the path to find executables
   ExecutablePath = SYSTEMPATH

   //this specifies an amount of time to wait after each process is launched
   MSBetweenLaunches = 200
}
//---------------------------------------



// The name or path of the file containing vehicle-specific settings.  At
// startup, iWhoiMicroModem first looks for a parameter in this file called 
// AUV_VEHICLE_ID, and uses its value as the Acoustic Network ID for the 
// modem.  If the file or parameter cannot be read, the NVRAM parameter SRC is
// used instead
VEHICLE_CONFIG_FILE_PATH = "vehicleconfig.moos"

//---------------------------------------
ProcessConfig = iSpock
{
   //------------------------------------
   // *** MOOS APPLICATION PARAMETERS
   // How fast should iterate be called?
   // This determines the rate at which sensor packets will be requested from
   // the SPOCK module.
   AppTick= 8

   // How responsive should comms be?
   CommsTick = 10

   // Hostname or IP address of the SPOCK module or "UDP" to receive UDP
   // multicast sensor packets
   SPOCK_HOSTNAME = 192.168.1.103
   
   // Network port to open a TCP connection to on the SPOCK module
   SPOCK_TCP_PORT = 20000

   // Network port that SPOCK sends UDP broadcast sensor packets on
   // (zero or omitted to obtain sensor values via a TCP connection to SPOCK) 
   SPOCK_UDP_PORT = 20001
      
   //PUBLISH_ONLY_CHANGES = TRUE      // Publish only sensors values that have
                                      // changed
   
   VERBOSITY = 4;
   
   // Set alternate MOOS variables SPOCK sensors should be published to
   //COMPASS_HEADING_PUBLISHTO = NAV_HEADING 
}
