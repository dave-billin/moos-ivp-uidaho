//  global variables anyone can use them
ServerHost = localhost
ServerPort = 9000

// you can name tag processes connected to a particular
// DB under a community name
Community = V1

//some processes look at this flag to see wether things are real
Simulator = false



//---------------------------------------
ProcessConfig = ANTLER
{
    // pAntler launches processes for you
    // you can specify whether or not each process gets a new window or not
    // you can specify the name under which each process registers with MOOSDB
    // Run = PROC_NAME @ [ NewConsole = [TRUE/FALSE] [~ MOOSNAME]]


    //crucial processes
    Run = MOOSDB        @   NewConsole = true
  	Run = iWhoiMicroModem @ NewConsole = true
  	Run = uMS
  	
   //this next line sets the executable paths explicitly
   //ExecutablePath = /media/RINGO/moos-ivp/MOOS/YellowSub/iSpock/src

   //this tells pAntler to use the system the path to find executables
   ExecutablePath = SYSTEMPATH

   //this specifies an amount of time to wait after each process is launched
   MSBetweenLaunches = 200
}
//---------------------------------------




// The name or path of the file containing vehicle-specific settings.  At
// startup, iWhoiMicroModem first looks for a parameter in this file called 
// AUV_VEHICLE_ID, and uses its value as the Acoustic Network ID for the 
// modem.  If the file or parameter cannot be read, the NVRAM parameter SRC is
// used instead
VEHICLE_CONFIG_FILE_PATH = "vehicleconfig.moos"

//---------------------------------------
ProcessConfig = iWhoiMicroModem
{
	//------------------------------------
	// *** MOOS APPLICATION PARAMETERS
	// How fast should iterate be called? (used by CMOOSApp)
	AppTick= 20

	// How responsive should comms be? (used by CommsClient)
	CommsTick = 20

	//------------------------------------
	// ** SERIAL PORT SETTINGS **
	//	For Gumstix OVERO hardware, serial ports may be 
	//	specified as:
	//
	//	Value for 'Port'		OMAP Serial Port
	//	-----------------		-------------
	//		/dev/ttyS0				UART 1
	//		/dev/ttyS2				UART 3
	//------------------------------------
	//Port = /dev/ttyS0
	Port = COM1
	BaudRate = 19200
	Streaming = true
	//Verbose = true
	
	//------------------------------------
	// WHOI NVRAM PARAMETERS
	// 	These parameters describe initial settings applied to the WHOI NVRAM 
	//	configuration parameters.  See Table 5 of the "Micro-Modem Software 
	//	Interface Guide" document for detailed information on acceptable
	//	parameter values.
	//------------------------------------
	AGC = 0			// Enable automatic gain control (1=enabled; 0=disabled)
	AGN = 255		// Analog Gain (0..255)
	ASD = 0			// Enable sending test data when none is provided (1=enabled;0=disabled)
//	BDD = 0			// Enable PSK Baseband data dump to serial port (1=TRUE;0=FALSE)

	BND = 3			// Communications Band:
					//		1 = A (10 kHz)
					//		2 = B (15 kHz)
					//		3 = C (25 kHz)
					//		4 = D (??)
					
	BR2 = 3			// WHOI Aux Serial port (port 2) baud rate
					//		0 = 2400 bps
					//		1 = 4800 bps
					//		2 = 9600 bps
					//		3 = 19200 bps (default)
					//		4 = 38400 bps
					//		5 = 57600 bps
					//		6 = 115200 bps
					//		7 = 230400 bps
					
//	BW0 = 4000		// Bandwidth for Band 0 PSK
	CPR = 1			// Co-processor power (0=manual; 1=auto)
	CRL = 50		// Cycle-init reverb lockout (msec)
	CST = 0			// Enable Rx cycle statistics message (1=TRUE;0=FALSE)
	CTO = 10		// Cycle-init timeout (sec)
	DBG = 0			// Enable low-level debug messages (1=TRUE;0=FALSE)
	DGM = 0			// Enable diagnostic messaging (1=TRUE;0=FALSE)
	DOP = 1			// Enable the CADOP message (1=TRUE;0=FALSE)
	DQF = 1			// Enable the CADQF message (1=TRUE;0=FALSE)
	DTH = 108		// Matched filter signal threshold, FSK
	DTO = 2			// Data request timeout (sec)
//	DTP = 90		// Matched filter signal threshold, PSK
	ECD = 50		// Delay at end of cycle (ms)
	EFF = 20		// Feed-forward taps for the LMS equalizer
	EFB = 10		// Feedback taps for the LMS equalizer
//	FCO = 25120		// Carrier at Band 0 PSK only
//	FML = 40		// PSK FM probe length, symbols
//	FMD = 1			// PSK FM probe direction (0=up; 1=down)
	GPS = 0			// Enable GPS parser on aux. serial port (1=TRUE;0=FALSE)
//	HFC = 0			// Enable hardware flow control on main serial port (1=TRUE;0=FALSE)
	IRE = 0			// Print impulse response of FM sweep
//	MOD = 0			// Mini-packet type (0=FSK; 1=PSK)
	MFD = 1			// Enable MFD messages (1=TRUE;0=FALSE)
	MSE = 0			// Print symbol mean squared error (dB) for the LMS equalizer	
	MCM = 1			// Enable current mode hydrophone PSU on Rev C. analog board (1=TRUE;0=FALSE)
	MPR = 1			// Enable power toggle on multi-channel analog board (1=TRUE;0=FALSE)
//	MVM = 1			// Enable voltage mode hydrophone PSU on analog board (1=TRUE;0=FALSE)
	NDT = 150		// Detect threshold for nav detector 
	NPT = 50		// Power threshold for nav detector
	NRL = 25		// Navigation reverb lockout (ms)
	NRV = 150		// Number of CTO's before hard reboot
	PAD = 2			// Power amp delay (ms)
	PCM = 0			// Passband channel mask
	PRL = 50		// Packet reverb lockout (ms)
	PTH = 180		// Matched filter detector power threshold
	POW = -100		// Detection power threshold (dB)
	PTO = 6			// Packet timeout (sec)
	REV = 1			// Enable the CAREV message (1=TRUE;0=FALSE)
	RSP = -157		// Receiver gain response (dB)
	RXA = 1			// Enable the CARXA message (1=TRUE;0=FALSE)
	RXD = 1			// Enable the CARXD message (1=TRUE;0=FALSE)
	RXP = 1			// Enable the CARXP message (1=TRUE;0=FALSE)	
	SCG = 0			// Set clock from GPS
	SGP = 0			// Show GPS messages on main serial port
	SHF = 0			// Enable the CASHF message (1=TRUE;0=FALSE)
	SNR = 0			// Enable SNR stats for PSK communications (1=TRUE;0=FALSE)
	SNV = 0			// Enable synchronous transmission of packets (1=TRUE;0=FALSE)
	SRC = 2			// *** Default Acoustic ID if not already specified in AUV_VEHICLE_ID ***
	TAT = 50		// Navigation turn-around time (ms)
	TOA = 0			// Enable display of packet time of arrival (1=TRUE;0=FALSE)
	TXD = 250		// Delay before transmit (ms)
	XST = 0			// Enable CAXST stats message (1=TRUE;0=FALSE)


	// END WHOI NVRAM PARAMETERS
	//------------------------------------
	
	
	
	
	//------------------------------------
	// *** WHOI COMMAND PRIORITIES ***
	//	Commands passed to the WHOI MicroModem at runtime are
	//	executed in order of priority based on values assigned 
	//	here.  Highest priority is 10; lowest is 0.  Commands 
	//	with equal priority are handled in the order in which 
	//	they were received from the MOOS DB.  To disable 
	//	command prioritization, simply assign all commands an
	//	equal value.
	
	PRIORITY_SendUserMiniPacket = 10
	PRIORITY_WriteASCIIData = 10
	PRIORITY_ReadASCIIData = 10
	PRIORITY_WriteBinaryData = 10
	PRIORITY_ReadBinaryData = 10
	PRIORITY_SendMiniPacketPing = 9
	PRIORITY_SendFmSweepPing = 9
	PRIORITY_SendRemusPing = 9
	PRIORITY_SendNarrowBandPing = 9
	PRIORITY_SetRealtimeClock = 8
	PRIORITY_SetNvramParamValue = 7
	PRIORITY_GetNvramParamValue = 7
	PRIORITY_SetIOLineState = 6
	PRIORITY_ModemSleep = 5
	PRIORITY_AutoLevelAgc = 4
	PRIORITY_MeasureNoiseLevel = 4
	
	// END WHOI COMMAND PRIORITIES
	//------------------------------------
	
	//---------------------------------------
	// *** MESSAGE PARSING OPTIONS ***
	
	// To publish ALL received ASCII and binary data packets, set this value
	// to "true"; Set to "false" if only received data packets addressed to the
	// modem's acoustic network ID should be published.  Default value if not
	// specified is "false".
	ENABLE_PROMISCUOUS_DATARX = true

	// To publish ALL received user mini-packets, set this value to "true"; Set 
	// to "false" if only received data packets addressed to the modem's acoustic 
	// network ID should be published.  Default value if not specified is "false".
	ENABLE_PROMISCUOUS_MINIPACKETRX = true
	
	// *** END MESSAGE PARSING OPTIONS ***
	//---------------------------------------
	
	
	//------------------------------------
	// *** WHOI DEBUG INFO ***
	// These variables control which debugging messages get printed to stdout
	//PRINT_MODEM_TX = true	// 'true' to print NMEA sentences sent to the modem to stdio
	PRINT_MODEM_RX = true	// 'true' to print NMEA sentences received from the modem to stdio
	//PRINT_MODEM_SETTINGS = true	// 'true' to print modem settings loaded at application start
}