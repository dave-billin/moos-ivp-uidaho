-------------------------------------------------
iWhoiMicroModem
-------------------------------------------------
Written in 2010 by Dave Billin
Undergraduate, B.S. Computer Engineering
University of Idaho
Moscow, ID USA


-------------------------------------------------------------------------------
 *** TABLE OF CONTENTS ***

  1.) Overview
  2.) Usage
  3.) MOOS mission file parameters
  4.) MOOS variables published by iWhoiMicroModem
  5.) MOOS variables subscribed to by iWhoiMicroModem
  6.) APPENDIX A: MOOS mission file example
-------------------------------------------------------------------------------


------------------------
1.) INTRODUCTION
------------------------

   The iWhoiMicroModem application is a MOOS instrument application providing
a comprehensive command interface to a Woods-Hole Oceanographic Institute 
Acoustic Micro-modem module via the MOOS database.  Unlike previous efforts at
creating MOOS instruments for the Micro-modem, iWhoiMicroModem has, from its 
initial conception, been designed such that its MOOS command interface is 
decoupled from data communication protocols (CCL, etc.) and  timing 
requirements, save those imposed by the modem hardware.  The intent is for 
iWhoiMicroModem to act in the same manner as a traditional 'hardware driver',
and allow other MOOS processes to handle the protocol and formatting of data
sent over the modem.  

   A great deal of effort has been expended producing a command interface that 
is both flexible and comprehensive - exposing as much of the Micro-modem's
functionality as possible, while handling much of the low-level handshaking and
'legwork' required to execute common high-level operations such as sending and
receiving data, navigation pings, etc.  Additionally, MOOS variables have been 
provided to expose each of the messages that are optionally produced by the 
modem, such as those carrying diagnostics and performance statistics.

   To the best of its ability, iWhoiMicromodem attempts to act as a multiclient
interface for one or more MOOS processes.  In this way, iWhoiMicromodem can be 
used for both navigation and data communication using CCL, Auvish, or other
protocols.  Modem operations are accessed by MOOS processes via a prioritized 
set of high-level 'command' variables.  This provides a basic means by which 
the needs for communications and navigation can be balanced for a particular
application.  Furthermore, it allows client MOOS processes to drive the timing
of these operations.






-------------------------------------------------------------------------------
2.) Usage
------------------------

iWhoiMicroModem [ FLAGS ] MISSION_FILE 

MISSION_FILE
	A MOOS mission file containing configuration parameters for the 
	iWhoiMicroModem application (see section 2 for details)
	
FLAGS
	--help				Prints this usage info
	-v, --version		Prints version info
	

	
	
	
	
	
-------------------------------------------------------------------------------
3.) MOOS mission file parameters
------------------------

   During its initialization, iWhoiMicroModem reads the MOOS mission file
specified in the command line arguments for various configuration parameters in
a section labeled 'iWhoiMicroModem'.

*** REQUIRED PARAMETERS ***
The following parameters must be present in MISSION_FILE for iWhoiMicroModem to 
function:

MOOS Application Settings:
	AppTick			Determines the frequency of calls to the iWhoiMicroModem
					Iterate() method.  Since iWhoiModem receives and parses
					data from the modem in this method, it is best to keep this
					value in the range of 10 to 100 depending on the need for
					responsiveness.
					
					
	CommsTick		Determines the period at which communications with the MOOS
					database are serviced.  Higher values will result in less
					latency for commands and data, but will increase CPU load
					for the app.
					
Serial Port Configuration
	Port			ID of the serial port connected to the Micro-modem module
					e.g. '/dev/ttyS0' under Linux or 'COM1' under Windows
					
	BaudRate		The baud rate used to communicate with the modem.  The
					Micro-modem module uses a baud rate of 19200 bps by default
					so don't change this unless you know what you're doing.
					
	Handshaking		Handshaking is not supported by the Micro-modem module, so
					this value should be neglected or set to 'false'
					
	Streaming		Setting this to "true" enables a worker thread that buffers
					received data outside of Iterate().  This can reduce the
					amount of time required to complete Iterate(), so it is
					generally adviseable.  If set to "false", Iterate() will
					require a minimum of 10 ms to complete due to the internal
					workings of CMOOSSerialPort.
					
	Verbose			Set to "true" if you want extra debugging info for the 
					serial port printed to stdio
					

Modem NVRAM Parameter Settings:
	SRC				Default Acoustic ID used by the modem if not specified in 
					the file given by AUV_VEHICLE_ID
					
	
	
	
*** OPTIONAL PARAMETERS ***
The user is advised to include the following parameters in MISSION_FILE, 
although they are not strictly required for the application to run.

Modem NVRAM parameters:
   These parameters mirror those exposed by the Micro-modem's software 
interface.  Brief descriptions and default values of NVRAM parameters follow.  
For additional details see Table 5 in the Micro-Modem Software Interface Guide 
provided by Woods-Hole.

	Param [default]	Description
	AGC	[0]			Enables automatic gain control
	
	AGN	[255]		WHOI docs recommend 250 for LBL, but Troy's thesis says 255
	ASD	[0]			Enable modem to send test data when user doesn't provide 
					any (1=TRUE;0=FALSE)
	BDD	[0]			Enable PSK Baseband data dump to serial port (1=TRUE; 
					0=FALSE)
	BND	[3]			Frequency bank (1-3 for Band A-C; 0 for user-defined PSK 
					only)
	BR1	[3]			Serial port 1 baud rate (3 = 19200)
	BR2	[3]			Serial port 2 baud rate (3 = 19200)
	BW0	[4000]		Bandwidth for Band 0 PSK
	CPR	[1]			Co-processor power toggle switch
	CRL	[50]		Cycle-init reverb lockout (ms)
	CST	[1]			Enable cycle statistics message (1=TRUE;0=FALSE)
	CTO	[10]		Cycle-init timeout (sec)
	DBG	[0]			Enable low-level debug messages (1=TRUE;0=FALSE)
	DGM	[0]			Enable diagnostic messaging (1=TRUE;0=FALSE)
	DOP	[0]			Enable the CADOP message (1=TRUE;0=FALSE)
	DQF [1]			Enable the CADQF message (1=TRUE;0=FALSE)
	DTH [108]		Matched filter signal threshold, FSK
	DTO [2]			Data request timeout (sec)
	DTP [90]		Matched filter signal threshold, PSK
	ECD [50]		Delay at end of cycle (ms)
	EFF [20]		Feed-forward taps for the LMS equalizer
	EFB [10]		Feedback taps for the LMS equalizer
	FC0 [25120]		Carrier at Band 0 PSK only
	FML [40]		PSK FM probe length, symbols
	FMD [1]			PSK FM probe direction (0=up; 1=down)
	GPS [0]			Enable GPS parser on aux. serial port (1=TRUE;0=FALSE)
	HFC [0]			Enable hardware flow control on main serial port (1=TRUE;
					0=FALSE)
	IRE [0]			Print impulse response of FM sweep
	MOD [0]			Mini-packet type (0=FSK; 1=PSK)
	MFD [1]			Enable MFD messages (1=TRUE;0=FALSE)
	MSE [0]			Print symbol mean squared error (dB) for the LMS equalizer
	MCM [1]			Enable current mode hydrophone PSU on Rev C. analog board 
					(1=TRUE; 0=FALSE)
	MPR [1]			Enable power toggle on multi-channel analog board (1=TRUE;
					0=FALSE)
	MVM [1]			Enable voltage mode hydrophone PSU on analog board (1=TRUE;
					0=FALSE)
	NDT [150]		Detect threshold for nav detector 
	NPT [50]		Power threshold for nav detector
	NRL [25]		Navigation reverb lockout (ms)
	NRV [150]		Number of CTO's before hard reboot
	PAD [2]			Power amp delay (ms)
	PCM [0]			Passband channel mask
	PRL [50]		Packet reverb lockout (ms)
	MFC [-2]		MFD calibration value (samples)
	POW [-100]		Detection power threshold (dB)
	PTH [180]		Matched filter detector power threshold
	PTO [6]			Packet timeout (sec)
	REV [1]			Enable the CAREV message (1=TRUE;0=FALSE)
	RSP [-157]		Receiver gain response (dB)
	RXA = [0]		Enable the CARXA message (1=TRUE;0=FALSE)
	RXD = [1]		Enable the CARXD message (1=TRUE;0=FALSE)
	RXP = [0]		Enable the CARXP message (1=TRUE;0=FALSE)
	SCG = [0]		Set clock from GPS
	SGP = [0]		Show GPS messages on main serial port
	SHF = [0]		Enable the CASHF message (1=TRUE;0=FALSE)
	SNR = [0]		Enable SNR stats for PSK communications (1=TRUE;0=FALSE)
	SNV = [0]		Enable synchronous transmission of packets (1=TRUE;0=FALSE)
	SRC = [0]		Default Acoustic ID if not already specified in 
					AUV_VEHICLE_ID
	TAT = [50]		Navigation turn-around time (ms)
	TOA = [0]		Enable display of packet time of arrival (1=TRUE;0=FALSE)
	TXD = [250]		Delay before transmit (ms)
	XST = [1]		Enable CAXST stats message (1=TRUE;0=FALSE)

	
Command Priorities
   Commands sent to the Micro-modem are queued and carried out in order of 
their assigned priority.  Priority values run from 0 to 10 with 10 having the
highest priority.  If no priority is specified for a command in the mission
file, that command's priority defaults to zero (lowest).  For priority-less 
(i.e. first-come-first-serve) operation, simply set all commands to the same 
priority.  The following parameters in the mission file control command 
priorities.  
	
	PRIORITY_SendUserMiniPacket=[priority]
	PRIORITY_WriteASCIIData=[priority]
	PRIORITY_ReadASCIIData=[priority]
	PRIORITY_WriteBinaryData=[priority]
	PRIORITY_ReadBinaryData=[priority]
	PRIORITY_SendMiniPacketPing=[priority]
	PRIORITY_SendFmSweepPing=[priority]
	PRIORITY_SendRemusPing=[priority]
	PRIORITY_SendNarrowBandPing=[priority]
	PRIORITY_SetRealtimeClock=[priority]
	PRIORITY_SetNvramParamValue=[priority]
	PRIORITY_GetNvramParamValue=[priority]
	PRIORITY_SetIOLineState=[priority]
	PRIORITY_ModemSleep=[priority]
	PRIORITY_AutoLevelAgc=[priority]
	PRIORITY_MeasureNoiseLevel=[priority]
	
	
Promiscuous Data Reception Modes:
	ENABLE_PROMISCUOUS_DATARX=[true/false]	
		If "true", *all* received data is reported to the MOOSDB; if 
		"false", only data packets addressed to the modem's assigned 
		acoustic network ID are reported to the MOOSDB.
	
	ENABLE_PROMISCUOUS_MINIPACKETRX=[true/false]
		If "true", *all* received Mini-packets are reported to the 
		MOOSDB; if "false", only Mini-Packets addressed to the modem's 
		assigned acoustic network ID are reported to the MOOSDB.
						
						
											
Debugging Messages:
   By default, debugging messages produced by iWhoiMicroModem are disabled.  
Setting any of the following mission file parameters to 'true' will enable
printing of specific debugging messages to stdio.

	PRINT_MODEM_TX		Print NMEA sentences sent to the modem
	PRINT_MODEM_RX		Print NMEA sentences received from the modem

	
	
	
	
	
-------------------------------------------------------------------------------
4.) MOOS variables that may be published by iWhoiMicroModem
------------------------

NOTE: All variables published by iWhoiMicroModem begin with the string
"iWhoiMicroModem" followed by an underscore ('_') character.  If the 
iWhoiMicroModem application is launched with a different name, MOOS variables 
published by iWhoiMicroModem will instead begin with this alternate name 
followed by an underscore character.  Variable names shown below reflect the
default application name.

----------------------------------------
Variable Name: iWhoiMicroModem_HardwareState

Description:
	A string describing the connection with the Micro-modem module.  The value
	of this variable is initially set to "Disconnected".  While the modem is
	being configured with parameter values specified in the mission file, this
	variable is given the value "Initializing".  After configuration is 
	complete and a heartbeat message has been received from the modem 
	indicating it is online, the value of iWhoiMicroModem_HardwareState is revised to 
	"Ready".  At that point, new commands will be accepted via the MOOS modem
	command interface (see section 5 for details).

----------------------------------------

----------------------------------------
Variable Name: iWhoiMicroModem_RxCycleInit

Posted when a communications cycle init (CACYC) message is received signaling
the beginning of some acoustic traffic.  This variable is only published when
the source or destination device ID specified in the cycle init matches that
of the modem's Acoustic Network ID.  Typically, a cycle init is received just
before data is sent by a remote device.

Fields:
	CMD=value
		Integer field containing a value from 0 to 7
		
	SrcID=[acoustic ID]
		Acoustic network ID of the device specified as the transmitter in the
		communications cycle (reported as the ADR1 field in WHOI docs)
		
	DestID=[acoustic ID]
		Acoustic network ID of the device specified as the receiver in the
		communications cycle (reported as the ADR2 field in WHOI docs)

	PacketType=TypeID
		The type of the packet as one of the following:
			0	80 bps FH-FSK
			1	250 bps 1/31 spreading (WHOI docs say this is unimplemented)
			2	500 bps 1/15 spreading
			3	1200 bps 1/7 spreading
			4	1300 bps 1/6 rate block code (WHOI docs say this is unimplemented)
			5	5300 bps 9/14 rate block code

	AckRequested=[true/false]
		Set to "true" if the transmitter device is requesting that an 
		acknowledgement be sent by Dest after the data from Src has arrived.

	NumFrames=Num
		The number of data frames that should be transmitted from Src to Dest

----------------------------------------

----------------------------------------
Variable Name: iWhoiMicroModem_RxBinaryData

Description:
	Hex-encoded binary data received by the modem is reported in this variable.
	
Fields:
	SrcID=[acoustic ID]
		Acoustic network ID of the device the data was sent from.
		
	DestID=[acoustic ID]
		Acoustic network ID of the device the data packet was addressed to.  
		This is really only useful when promiscuous Data receive mode is 
		enabled by setting the mission file parameter 
		ENABLE_PROMISCUOUS_DATARX to "true".
		
	AckReq=[true/false]
		Set to "true" if the sender requested an acknowledgement that the data
		was received (this acknowledgement is sent automatically by the modem).
		
	FrameNumber=Num
		Num contains the number of the data frame being sent (1..N).  Large 
		sets of acoustic data are divided into multiple frames.  This provides
		a mechanism by which the order of received data can be restored and
		allows a subscriber to determine if any data frames have been missed.
		To determine the number of data frames expected for a received packet,
		a subscriber should also listen to the iWhoiMicroModem_RxCycleInit variable 
		published by iWhoiMicroModem.		

	Data=[hex characters]
		Hexadecimal-encoded character pairs describing Bytes in the received
		message frame.
		
----------------------------------------

----------------------------------------
Variable Name: iWhoiMicroModem_RxUserMiniPacket

Description:
	Posted when a user mini-packet is received.  Note: If the parameter
	PROMISCUOUS_MINIPACKET_MODE is set to "false", then only user mini-
	packets specifying the modem's acoustic network ID are reported.
	
Fields:
	SrcID=[acoustic ID]
		Acoustic network ID of the device the data was sent from.
		
	DestID=[acoustic ID]
		Acoustic network ID of the device the data packet was addressed to.  
		This is really only useful when promiscuous Data receive mode is 
		enabled by setting the mission file parameter 
		ENABLE_PROMISCUOUS_DATARX to "true".
		
	Data=[hex data]
		Four hexadecimal characters representing the 13-bit payload value 
		of the received Mini-Packet
	
----------------------------------------
	


iWhoiMicroModem_RTC_Time				
	Real-time clock time reported by the modem in a CACLK message


iWhoiMicroModem_LowLevelDebug			
	Low-level debugging info reported by the modem in a CADBG message (the DBG
	NVRAM parameter must be set to 1 in order to receive this information)

iWhoiMicroModem_DopplerSpeed			
	Relative doppler speed reported by the modem in a CADOP message (the DOP 
	NVRAM parameter must be set to 1 in order to receive this information)

iWhoiMicroModem_FSKDataQuality			
	Data quality factor of the last received FSK packet reported by the modem 
	in a CADQF message (the DQF NVRAM parameter must be set to 1 in order to 
	receive this information)
							
iWhoiMicroModem_ErrorMsg				
	Error information reported by the modem in a CAERR message
							
iWhoiMicroModem_MatchedFilterCOMMS		
	Matched filter information for communications reported by the modem in a 
	CAMFD message
							
iWhoiMicroModem_TransactionMessage		
	Bad CRC or data packet timeout reported by the modem in a CAMSG message
							
iWhoiMicroModem_SoftwareRevision		
	Application name and software revision reported by the modem in a CAREV 
	message (the REV NVRAM parameter must be set to 1 in order to receive this 
	information)
							
iWhoiMicroModem_CoprocRevision			
	Coprocessor software name and revision reported by the modem in a CAREV 
	message (the REV NVRAM parameter must be set to 1 in order to receive this 
	information)							
							
iWhoiMicroModem_RxPacketStart			
	Posted when an incoming packet is detected as reported by the modem in a 
	CARXP message (the RXP NVRAM parameter must be set to 1 in order to receive 
	this information)
							
iWhoiMicroModem_MatchedFilterNAV		
	Matched filter detector info for navigation pings as reported by the modem 
	in an SNMFD message
							
iWhoiMicroModem_CycleTxStats			
	Communication cycle transmit statistics (the XST NVRAM parameter must be set 
	to 1 to receive this information).

iWhoiMicroModem_CycleRxStats			
	Communication cycle receive statistics (the CST NVRAM parameter must be set 
	to 1 to receive this information).						

iWhoiMicroModem_GpsThru		
	GPS NMEA sentences passed through from the modem's aux serial port will be 
	reported in this variable.  The CRC field in the GPS NMEA sentence is omitted.

	
	
	
	
	
	
	
-------------------------------------------------------------------------------
5.) MOOS variables subscribed to by iWhoiMicroModem
------------------------

NOTE: All variables subscribed to by iWhoiMicroModem begin with the string
"iWhoiMicroModem" followed by an underscore ('_') character.  If the 
iWhoiMicroModem application is launched with a different name, MOOS variables 
subscribed to by the application will instead begin with this alternate name 
followed by an underscore character.  Variable names shown below reflect the
default application name.

----------------------------
MOOS Variable: iWhoiMicroModem_CMD
----------------------------
This variable serves as the primary interface to which modem commands are 
issued.  All modem commands consist of a string of Name=value pairs.  The first
of these pairs identifies the operation to be performed.  Subsequent pairs
communicate parameters needed for the modem operation.

** Example **	
"Cmd=[CommandKey],[param1]=[value],[param2]=[value],...[paramN]=[value]"

The name=value pair "Notify=MOOSVARIABLE" can optionally be included in any 
modem command string.  When supplied, MOOSVARIABLE should be a string 
containing the name of the MOOS variable to be notified with the completion 
status of the command.  At minimum, the following name=value pair will be
posted to MOOSVARIABLE:

Error=[condition]	May be set to one of the following:
	"None"			- No error occurred (the command completed successfully)
	"Fail"			- Modem failed to carry out the command
	"BadParam"		- A parameter in the modem command was invalid
	"NoHardware"	- The modem hardware is not connected.
	"TxDisabled"	- The command could not be completed because outgoing 
					  acoustic traffic is currently disabled via the 
					  UMODEM_TxEnabled variable.
	
Additional name=value pairs may be posted by modem commands on completion.  See
the documentation for individual modem commands for details.



SUPPORTED MODEM COMMANDS:

--------------------------
Key: TxUserMiniPacket
--------------------------
[** Description **]	
Sends a (13-bit) Sends a user mini-packet to the specified acoustic network 
device ID.  Currently, the SRC (data originator) field of the corresponding 
command sent to the modem is automatically populated with iWhoiMicroModem's 
acoustic network ID.

[** Parameters **]
Dest		
	The ID Of the acoustic network device the mini-packet is addressed to.

Payload
	A 4-character hex-encoded 16-bit MSB left-aligned, little-endian value 
	as a string.  Only the lowest 12 bits (0..11) of this value are used.  
	Acceptable values range from "0000" to "1FFF".

[Example]
The command string:	"Cmd=TxUserMiniPacket,Dest=3,Payload=15A5"
would send a user mini packet to acoustic device 3 containing the 13-bit 
payload value 0x15a5.

	
	

--------------------------
Key: TxASCIIData
--------------------------
<< not yet implemented >>


--------------------------
Key: WriteBinaryData
--------------------------
[** Description **]	
Sends one or more frames of hex-encoded data to a specified acoustic network ID

[** Parameters **]
Dest
	The ID Of the acoustic network device the data is addressed to.
	
PacketType
	Integer ID specifying the type of packet used to send the data as one of
	the following:
		0	80 bps FH-FSK
		1	250 bps 1/31 spreading (WHOI docs say this is unimplemented)
		2	500 bps 1/15 spreading
		3	1200 bps 1/7 spreading
		4	1300 bps 1/6 rate block code (WHOI docs say this is unimplemented)
		5	5300 bps 9/14 rate block code

AckTimeoutSec
	A integer specifying the maximum time (in seconds) to wait for an 
	acknowledgement to be received from the device the data is addressed to.
	Values equal to or less than zero will send the data without an ACK request
	and (naturally) not wait for a response from the receiving device.
	
	NOTE: Positive values for AckTimeout will block ALL pending modem commands
		  from executing until the acknowledgement is received or the timeout 
		  elapses.  This can cause a *significant* reduction in responsiveness
		  for systems in which multiple processes are accessing the modem.

Payload
	A string containing the hex-encoded Byte values to be sent to the specified 
	device ID.  Each Byte must be encoded as a two-character value from "00" to
	"FF".  Acceptable payload length varies based on the packet type specified
	in the PacketType parameter.  Each packet type dictates a minimum and 
	maximum number of Bytes that can be sent.
	
	IMPORTANT: 
		For a given packet type, the number of Bytes represented in Payload 
		should be equal to or less than the specified packet type's minimum 
		packet size.  Table 1 gives minimum and maximum packet sizes for each
		packet type.
	

	Table 1 - Packet Type vs. Packet Size
	-----------------------------------------------
	|   Packet  |    Minimum     |    Maximum     |
	|   Type    |  Chars/Bytes   |  Chars/Bytes   |
	-----------------------------------------------
	|     0     |       32       |      32        |
	|     1     |       32       |      96        |
	|     2     |       64       |      192       |
	|     3     |       256      |      512       |
	|     4     |       256      |      512       |
	|     5     |       256      |      2048      |
	|     6     |       32       |      192       |
	-----------------------------------------------

	NOTE:
	For payloads longer than the minimum packet size, payload data is
	actually sent as multiple subframes.  The framing of this data is 
	managed internally by the modem.  For details, see the documentation
	for the CCTXD, CRXD, and CCCYC messages in the Micro-Modem Software
	Interface Guide.
	
[Example]
The command string:	
	"Cmd=WriteBinaryData,Dest=2,PacketType=0,AckTimeout=0,
	 Payload=0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"
	 
would send an 80 bps FH-FSK packet containing the 32 Byte sequence 01,23,45,67,
89,AB,CD,EF,01,23,45,67,89,AB,CD,EF,01,23,45,67,89,AB,CD,EF,01,23,45,67,89,AB,
CD,EF to acoustic device 2 without requesting an acknowledgement that the data 
was received


[Additional Values posted to Notify variable]
	Error="Timeout"
		The number of seconds specified in AckTimeout elapsed before receiving 
		an acknowledgement from the destination device

	TxTimeStamp=[MOOSTime]
		MOOS time when the message finished transmitting
	
	

--------------------------
Key: TxMiniPacketPing
--------------------------
<< not yet implemented >>


--------------------------
Key: TxFmSweepPing
--------------------------
<< not yet implemented >>


--------------------------
Key: TxRemusPing
--------------------------
[** Description **]	
Sends an active LBL navigation ping to a REMUS-compatible digital transponder
and waits for a reply.

[** Parameters **]
Group
	Transponder group designator (at present only 1 is available, which
	corresponds to a set A-D
	
Channel
	Interrogation channel as an integer from 1 to 4

Sync
	Enable hardware synchronous outgoing pulse [true/false].

SyncTimeoutms
	Synchronization timeout in milliseconds.  Set to zero if not used

ListenTimeoutms
	Maximum number of milliseconds to listen for the ping reply

Beacons
	A string of characters indicating the individual transponder beacons to 
	listen for (A-D).  To detect only beacons A and C, this string would be 
	"AC", whereas to detect all four beacons in the group, the string would be 
	"ABCD".
	
[Example]
The command string:	
	"Cmd=TxRemusPing,Group=1,Channel=2,Sync=false,
	 SyncTimeoutms=0,ListenTimeoutms=2000,Beacons=AB"
	 
would ping transponder group 1 on channel 2 with no hardware synchronization,
and listen for a reply from transponders A and B for 2 seconds before giving 
up.

[Additional Values posted to Notify variable]
	"Error=Timeout"
		The specified timeout elapsed before receiving a reply from the 
		beacon(s)
	
	"PingTime=[HHMMSS.ss]	Time of ping (Modem time from real-time clock)
							where HH = hours, MM = minutes, SS = seconds,
							ss = milliseconds
							
	"TimeA=[Travel time (ms)]"	Travel time for transponder A
	"TimeB=[Travel time (ms)]"	Travel time for transponder B
	"TimeC=[Travel time (ms)]"	Travel time for transponder C
	"TimeD=[Travel time (ms)]"	Travel time for transponder D
	
	NOTE: 
		If a reply was not received (or requested) from a transponder,
		it will not be reported in the Notification.  Travel times that are
		reported by the modem already have the transponder turnaround time 
		(value specified in the NVRAM parameter TAT) subtracted from them.


	
--------------------------
Key: TxNarrowBandPing
--------------------------
<< not yet implemented >>


--------------------------
Key: SetRealtimeClock
--------------------------
<< not yet implemented >>


--------------------------
Key: SetNvramParam
--------------------------
<< not yet implemented >>


--------------------------
Key: GetNvramParam
--------------------------
<< not yet implemented >>


--------------------------
Key: SetIOLineState
--------------------------
<< not yet implemented >>


--------------------------
Key: ModemSleep
--------------------------
<< not yet implemented >>


--------------------------
Key: AutoLevelAgc
--------------------------
<< not yet implemented >>


--------------------------
Key: MeasureNoiseLevel
--------------------------
<< not yet implemented >>





----------------------------
iWhoiMicroModem_TxEnabled
----------------------------
Controls whether outgoing acoustic traffic from the modem is enabled.  The
value of this variable should be set to "Enabled=[true/false]".  A value of 
"false" will disable all outgoing acoustic activity from the modem, and any 
commands resulting in such traffic will return an error condition.  Modem 
commands which do not result in acoustic traffic are carried out as usual.





-------------------------------------------------------------------------------
5.) APPENDIX A: MOOS mission file example
------------------------

The following is an example of a typical mission file used to configure the
iWhoiMicroModem application.

//  global variables anyone can use them
ServerHost = localhost
ServerPort = 9000

// you can name tag processes connected to a particular
// DB under a community name
Community = V1

//some processes look at this flag to see wether things are real
Simulator = false

// The name or path of the file containing vehicle-specific settings.  At
// startup, iWhoiMicroModem first looks for a parameter in this file called 
// AUV_VEHICLE_ID, and uses its value as the Acoustic Network ID for the 
// modem.  If the file or parameter cannot be read, the NVRAM parameter SRC is
// used instead
VEHICLE_CONFIG_FILE_PATH = "vehicleconfig.moos"

//---------------------------------------
ProcessConfig = iWhoiMicroModem
{
	//------------------------------------
	// *** MOOS APPLICATION PARAMETERS
	// How fast should iterate be called? (used by CMOOSApp)
	AppTick= 20

	// How responsive should comms be? (used by CommsClient)
	CommsTick = 20

	//------------------------------------
	// ** SERIAL PORT SETTINGS **
	//	For Gumstix OVERO hardware, serial ports may be 
	//	specified as:
	//
	//	Value for 'Port'		OMAP Serial Port
	//	-----------------		-------------
	//		/dev/ttyS0				UART 1
	//		/dev/ttyS2				UART 3
	//------------------------------------
	Port = /dev/ttyS0
	BaudRate = 19200
	Streaming = true		// This value *must* be set to 'true'
	
	
	//------------------------------------
	// WHOI NVRAM PARAMETERS
	// 	These parameters describe initial settings applied to the WHOI NVRAM 
	//	configuration parameters.  See Table 5 of the "Micro-Modem Software 
	//	Interface Guide" document for detailed information on acceptable
	//	parameter values.
	//------------------------------------
	AGC = 0			// Enable automatic gain control (1=enabled; 0=disabled)
	AGN = 255		// Analog Gain (0..255)
	ASD = 0			// Enable sending test data when none is provided (1=enabled;0=disabled)
//	BDD = 0			// Enable PSK Baseband data dump to serial port (1=TRUE;0=FALSE)

	BND = 3			// Communications Band:
					//		1 = A (10 kHz)
					//		2 = B (15 kHz)
					//		3 = C (25 kHz)
					//		4 = D (??)
					
	BR1 = 3			// Serial port 1 baud rate
					//		0 = 2400 bps
					//		1 = 4800 bps
					//		2 = 9600 bps
					//		3 = 19200 bps (default)
					//		4 = 38400 bps
					//		5 = 57600 bps
					//		6 = 115200 bps
					//		7 = 230400 bps
					
//	BR2 = 3			// Serial port 2 baud rate (see table for BR1)
//	BW0 = 4000		// Bandwidth for Band 0 PSK
	CPR = 1			// Co-processor power (0=manual; 1=auto)
	CRL = 50		// Cycle-init reverb lockout (msec)
	CST = 1			// Enable cycle statistics message (1=TRUE;0=FALSE)
	CTO = 10		// Cycle-init timeout (sec)
	DBG = 1			// Enable low-level debug messages (1=TRUE;0=FALSE)
	DGM = 1			// Enable diagnostic messaging (1=TRUE;0=FALSE)
	DOP = 1			// Enable the CADOP message (1=TRUE;0=FALSE)
	DQF = 1			// Enable the CADQF message (1=TRUE;0=FALSE)
	DTH = 108		// Matched filter signal threshold, FSK
	DTO = 2			// Data request timeout (sec)
//	DTP = 90		// Matched filter signal threshold, PSK
	ECD = 50		// Delay at end of cycle (ms)
	EFF = 20		// Feed-forward taps for the LMS equalizer
	EFB = 10		// Feedback taps for the LMS equalizer
//	FCO = 25120		// Carrier at Band 0 PSK only
//	FML = 40		// PSK FM probe length, symbols
//	FMD = 1			// PSK FM probe direction (0=up; 1=down)
	GPS = 0			// Enable GPS parser on aux. serial port (1=TRUE;0=FALSE)
//	HFC = 0			// Enable hardware flow control on main serial port (1=TRUE;0=FALSE)
	IRE = 0			// Print impulse response of FM sweep
//	MOD = 0			// Mini-packet type (0=FSK; 1=PSK)
	MFD = 1			// Enable MFD messages (1=TRUE;0=FALSE)
	MSE = 0			// Print symbol mean squared error (dB) for the LMS equalizer	
	MCM = 1			// Enable current mode hydrophone PSU on Rev C. analog board (1=TRUE;0=FALSE)
	MPR = 1			// Enable power toggle on multi-channel analog board (1=TRUE;0=FALSE)
//	MVM = 1			// Enable voltage mode hydrophone PSU on analog board (1=TRUE;0=FALSE)
	NDT = 150		// Detect threshold for nav detector 
	NPT = 50		// Power threshold for nav detector
	NRL = 25		// Navigation reverb lockout (ms)
	NRV = 150		// Number of CTO's before hard reboot
	PAD = 2			// Power amp delay (ms)
	PCM = 0			// Passband channel mask
	PRL = 50		// Packet reverb lockout (ms)
	PTH = 180		// Matched filter detector power threshold
	POW = -100		// Detection power threshold (dB)
	PTO = 6			// Packet timeout (sec)
	REV = 1			// Enable the CAREV message (1=TRUE;0=FALSE)
	RSP = -157		// Receiver gain response (dB)
	RXA = 0			// Enable the CARXA message (1=TRUE;0=FALSE)
	RXD = 1			// Enable the CARXD message (1=TRUE;0=FALSE)
	RXP = 0			// Enable the CARXP message (1=TRUE;0=FALSE)	
	SCG = 0			// Set clock from GPS
	SGP = 0			// Show GPS messages on main serial port
	SHF = 0			// Enable the CASHF message (1=TRUE;0=FALSE)
	SNR = 0			// Enable SNR stats for PSK communications (1=TRUE;0=FALSE)
	SNV = 0			// Enable synchronous transmission of packets (1=TRUE;0=FALSE)
	SRC = 0			// *** Default Acoustic ID if not already specified in AUV_VEHICLE_ID ***
	TAT = 50		// Navigation turn-around time (ms)
	TOA = 0			// Enable display of packet time of arrival (1=TRUE;0=FALSE)
	TXD = 250		// Delay before transmit (ms)
	TXP = 1			// Report start of transmit message (1=TRUE;0=FALSE)
	TXF = 1			// Report end of transmit message (1=TRUE;0=FALSE)
	XST = 1			// Enable CAXST stats message (1=TRUE;0=FALSE)

	// END WHOI NVRAM PARAMETERS
	//------------------------------------
	
	
	
	
	//------------------------------------
	// *** WHOI COMMAND PRIORITIES ***
	//	Commands passed to the WHOI MicroModem at runtime are
	//	executed in order of priority based on values assigned 
	//	here.  Highest priority is 10; lowest is 0.  Commands 
	//	with equal priority are handled in the order in which 
	//	they were received from the MOOS DB.  To disable 
	//	command prioritization, simply assign all commands an
	//	equal value.
	
	PRIORITY_SendUserMiniPacket = 10
	PRIORITY_WriteASCIIData = 10
	PRIORITY_ReadASCIIData = 10
	PRIORITY_WriteBinaryData = 10
	PRIORITY_ReadBinaryData = 10
	PRIORITY_SendMiniPacketPing = 9
	PRIORITY_SendFmSweepPing = 9
	PRIORITY_SendRemusPing = 9
	PRIORITY_SendNarrowBandPing = 9
	PRIORITY_SetRealtimeClock = 8
	PRIORITY_SetNvramParamValue = 7
	PRIORITY_GetNvramParamValue = 7
	PRIORITY_SetIOLineState = 6
	PRIORITY_ModemSleep = 5
	PRIORITY_AutoLevelAgc = 4
	PRIORITY_MeasureNoiseLevel = 4
	
	// END WHOI COMMAND PRIORITIES
	//------------------------------------
	
	
	//------------------------------------
	// *** WHOI DEBUG INFO ***
	// These variables control which debugging messages get printed to stdout
	PRINT_MODEM_TX = true	// 'true' to print NMEA sentences sent to the modem to stdio
	PRINT_MODEM_RX = true	// 'true' to print NMEA sentences received from the modem to stdio
	
}



THE END
